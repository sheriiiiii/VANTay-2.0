generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name      String
  email     String   @unique
  password  String // Hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Van {
  id          Int       @id @default(autoincrement())
  plateNumber String    @unique
  capacity    Int
  model       String?
  status      VanStatus @default(ACTIVE)
  routeId     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  seats       Seat[]
  trips       Trip[]
  route       Route     @relation(fields: [routeId], references: [id])
}

model Route {
  id          Int      @id @default(autoincrement())
  name        String
  origin      String
  destination String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trips       Trip[]
  vans        Van[]
}

model Trip {
  id             Int        @id @default(autoincrement())
  vanId          Int
  routeId        Int
  driverName     String?
  driverPhone    String?
  tripDate       DateTime
  arrivalTime    String?
  status         TripStatus @default(SCHEDULED)
  availableSeats Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  tickets        Ticket[]
  route          Route      @relation(fields: [routeId], references: [id])
  van            Van        @relation(fields: [vanId], references: [id])

  @@unique([vanId, tripDate])
}

model Seat {
  id         Int      @id @default(autoincrement())
  vanId      Int
  van        Van      @relation(fields: [vanId], references: [id])
  seatNumber String // e.g., "A1", "B2"
  tickets    Ticket[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([vanId, seatNumber])
}

model Ticket {
  id                        Int    @id @default(autoincrement())
  ticketNumber              String @unique @default(cuid())
  tripId                    Int
  seatId                    Int
  passengerName             String
  passengerAddress          String
  passengerAge              Int
  passengerPhone            String
  passengerEmergencyContact String

  // Pricing and classification
  passengerType PassengerType @default(REGULAR)
  regularFare   Float         @default(200.00)
  discount      Float         @default(0.00)
  totalFare     Float

  // Payment and status
  paymentMethod PaymentMethod @default(CASH)
  paymentStatus PaymentStatus @default(PENDING)
  ticketStatus  TicketStatus  @default(ACTIVE)

  // QR Code and verification
  qrCode    String    @unique
  isScanned Boolean   @default(false)
  scannedAt DateTime?

  // Timestamps
  bookedAt    DateTime  @default(now())
  paidAt      DateTime?
  cancelledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Trip        Trip      @relation(fields: [tripId], references: [id])
  Seat        Seat      @relation(fields: [seatId], references: [id])

  @@unique([tripId, seatId]) // One ticket per seat per trip
}

enum VanStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

enum TripStatus {
  SCHEDULED
  BOARDING
  DEPARTED
  COMPLETED
  CANCELLED
}

enum PassengerType {
  REGULAR
  STUDENT
  PWD
  SENIOR_CITIZEN
}

enum PaymentMethod {
  CASH
  GCASH
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  CANCELLED
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELLED
  EXPIRED
  PENDING
}
